#!/usr/bin/env python3
from datetime import date, timedelta
from random import choice, randrange, seed
from threading import Thread
from time import sleep
from typing import List

import requests as requests_module
from alembic import command
from alembic.config import Config
from requests.exceptions import ConnectionError

from app import create_app
from mybelts.schema import Base, User, session_context

API_PORT = 5001
API_URL = f'http://127.0.0.1:{API_PORT}/api'

requests = requests_module.session()


def run_api() -> None:
    app = create_app()
    app.run(port=API_PORT)


def start_api() -> None:
    # start Flask in a separate process
    Thread(target=run_api, daemon=True).start()
    # wait until the API is ready
    while True:
        try:
            res = requests.get(API_URL)
        except ConnectionError:
            pass
        else:
            if res.status_code == 200:
                break
        sleep(1)


def reset_database() -> None:
    print('Reseting database')
    Base.metadata.drop_all()
    command.stamp(Config('./alembic.ini'), 'base')
    command.upgrade(Config('./alembic.ini'), 'head')
    print('Reset Database')


def add_admin() -> None:
    print('Testing /login')

    # test logging in with invalid credentials
    res = requests.post(API_URL + '/login', json={'username': 'root', 'password': 'root'})
    assert res.status_code == 401

    # create admin user
    with session_context() as session:
        user = User(
            username='root',
            password='root',
            is_admin=True,
        )
        session.add(user)
        session.commit()

    # check authentication is required
    res = requests.get(API_URL + '/belts')
    assert res.status_code == 401

    # test logging in
    res = requests.post(API_URL + '/login', json={'username': 'root', 'password': 'root'})
    res.raise_for_status()
    j = res.json()
    print(j)
    requests.headers.update({'Authorization': 'Bearer ' + j['token']})

    # check authentication succeeds
    res = requests.get(API_URL + '/belts')
    j = res.json()
    print(j)
    res.raise_for_status()
    assert j == {'belts': []}

    print('Tested /login')


def test_missing_i18n_keys() -> None:
    print('Testing /missing-i18n-key')

    # add missing i18n keys
    for _ in range(3):
        res = requests.post(API_URL + '/missing-i18n-key', json={
            'language': 'en',
            'namespace': 'translation',
            'key': 'main_title',
        })
        res.raise_for_status()

    # check missing keys
    res = requests.get(API_URL + '/missing-i18n-key')
    res.raise_for_status()
    j = res.json()
    event, = j['events']
    assert event['language'] == 'en'
    assert event['namespace'] == 'translation'
    assert event['key'] == 'main_title'
    assert event['count'] == 3

    # check we get the missing i18n keys at next login
    res = requests.post(API_URL + '/login', json={'username': 'root', 'password': 'root'})
    res.raise_for_status()
    j = res.json()
    print(j)
    events = j['missing_i18n_key_events_since_last_login']
    assert events['total'] == 3
    assert events['unique'] == 1

    print('Tested /missing-i18n-key')


def add_users() -> None:
    print('Testing /users')

    # add first user
    res = requests.post(API_URL + '/users', json={
        'username': 'tartempion',
        'password': 'correct horse battery staple',
        'is_admin': True,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['user']['username'] == 'tartempion'
    assert j['user']['is_admin']
    user_id1 = j['user']['id']

    # add temporary user
    res = requests.post(API_URL + '/users', json={
        'username': 'temporary',
        'password': 'temporary',
        'is_admin': False,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['user']['username'] == 'temporary'
    assert not j['user']['is_admin']
    user_id2 = j['user']['id']

    # update temporary user
    res = requests.put(API_URL + f'/users/{user_id2}', json={
        'is_admin': False,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['user']['id'] == user_id2
    assert j['user']['username'] == 'temporary'
    assert not j['user']['is_admin']

    # delete temporary user
    res = requests.delete(API_URL + f'/users/{user_id2}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/users/{user_id2}')
    assert res.status_code == 404

    # check final state
    res = requests.get(API_URL + f'/users/{user_id1}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['user']['id'] == user_id1
    assert j['user']['username'] == 'tartempion'
    assert j['user']['is_admin']

    print('Tested /users')


def add_belts() -> List[int]:
    print('Testing /belts')

    belt_names = [
        'Ceinture blanche',
        'Ceinture blanche',  # changed to 'Ceinture jaune' later
        'Ceinture orange',
        'Ceinture verte',
        'Ceinture bleue',
        'Ceinture marron',
        'Ceinture noire',
        'Ceinture transparente',  # deleted later
    ]

    belt_colors = [
        '#ffffff',
        '#ffffff',  # changed to '#f6d32d' later
        '#ff7800',
        '#13dc00',
        '#3584e4',
        '#865e3c',
        '#000000',
        '#dc8add',  # deleted later
    ]

    belt_codes = [
        '1blanche',
        '1blanche',  # changed to '2jaune' later
        '3orange',
        '4verte',
        '5bleue',
        '6marron',
        '7noire',
        '8transparente',  # deleted later
    ]

    assert len(belt_names) == len(belt_colors)

    # add belts
    ids = []
    for i, (belt_name, belt_code, belt_color) in enumerate(zip(belt_names, belt_codes, belt_colors)):
        res = requests.post(API_URL + '/belts', json={
            'name': belt_name,
            'code': belt_code,
            'color': belt_color,
        })
        res.raise_for_status()
        j = res.json()
        belt = j['belt']
        assert belt['name'] == belt_name
        assert belt['rank'] == i + 1
        assert belt['code'] == belt_code
        ids.append(j['belt']['id'])
    assert len(ids) == len(belt_names)

    # rename belt
    belt_names[1] = 'Ceinture jaune'
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'name': belt_names[1]})
    res.raise_for_status()
    j = res.json()
    belt = j['belt']
    assert belt['id'] == ids[1]
    assert belt['name'] == belt_names[1]
    assert belt['code'] == belt_codes[1]
    assert belt['rank'] == 2

    # change belt's code
    belt_codes[1] = '2jaune'
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'code': belt_codes[1]})
    res.raise_for_status()
    j = res.json()
    belt = j['belt']
    assert belt['id'] == ids[1]
    assert belt['name'] == belt_names[1]
    assert belt['code'] == belt_codes[1]
    assert belt['rank'] == 2

    # change belt's color
    belt_colors[1] = '#f6d32d'
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'color': belt_colors[1]})
    res.raise_for_status()
    j = res.json()
    belt = j['belt']
    assert belt['id'] == ids[1]
    assert belt['name'] == belt_names[1]
    assert belt['code'] == belt_codes[1]
    assert belt['rank'] == 2

    # delete belt
    res = requests.delete(API_URL + f'/belts/{ids[-1]}')
    res.raise_for_status()
    res = requests.get(API_URL + '/belts')
    res.raise_for_status()
    belts = {belt['id']: belt for belt in res.json()['belts']}
    assert ids[-1] not in belts
    belt_codes.pop()
    belt_names.pop()
    ids.pop()

    # exchange rank with another belt
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'other_belt_id': ids[2]})
    res.raise_for_status()
    j = res.json()
    belt = j['belt']
    assert belt['id'] == ids[1]
    assert belt['name'] == belt_names[1]
    assert belt['code'] == belt_codes[1]
    assert belt['rank'] == 3

    # check rank of other belt
    res = requests.get(API_URL + '/belts')
    res.raise_for_status()
    belts = {belt['id']: belt for belt in res.json()['belts']}
    belt = belts[ids[2]]
    assert belt['id'] == ids[2]
    assert belt['name'] == belt_names[2]
    assert belt['code'] == belt_codes[2]
    assert belt['rank'] == 2

    # increase rank by 2
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'increase_by': 2})
    res.raise_for_status()
    j = res.json()
    belt = j['belt']
    assert belt['id'] == ids[1]
    assert belt['name'] == belt_names[1]
    assert belt['code'] == belt_codes[1]
    assert belt['rank'] == 5

    # check rank of the other two belts
    res = requests.get(API_URL + '/belts')
    res.raise_for_status()
    belts = {belt['id']: belt for belt in res.json()['belts']}
    belt = belts[ids[3]]
    assert belt['id'] == ids[3]
    assert belt['name'] == belt_names[3]
    assert belt['code'] == belt_codes[3]
    assert belt['rank'] == 3
    belt = belts[ids[4]]
    assert belt['id'] == ids[4]
    assert belt['code'] == belt_codes[4]
    assert belt['rank'] == 4

    # move back to initial position
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'increase_by': -3})
    res.raise_for_status()
    j = res.json()
    belt = j['belt']
    assert belt['id'] == ids[1]
    assert belt['name'] == belt_names[1]
    assert belt['code'] == belt_codes[1]
    assert belt['rank'] == 2

    # check final state
    res = requests.get(API_URL + '/belts')
    res.raise_for_status()
    belts = {belt['id']: belt for belt in res.json()['belts']}
    for i, (belt_name, belt_code, belt_color) in reversed(list(enumerate(zip(belt_names, belt_codes, belt_colors)))):
        belt = belts[ids[i]]
        assert belt['name'] == belt_name
        assert belt['code'] == belt_code
        assert belt['color'] == belt_color
        assert belt['rank'] == i + 1

    print('Tested /belts')
    return ids


def add_skill_domains() -> List[int]:
    print('Testing /skill-domains')

    skill_domain_names = [
        'NumÃ©ration',
        'calculs',  # changed to 'Calculs' later
        'Espace et gÃ©omÃ©trie',
        'Grandeurs et mesures',
        'Raisonnement',
        'NumÃ©rique',
        'Histoire',  # deleted later
    ]

    skill_domain_codes = [
        'D1',
        'D1',  # changed to 'D2' later
        'D3',
        'D4',
        'D5',
        'D6',
        'D7',  # deleted later
    ]

    # add skill domains
    ids = []
    for skill_domain_name, skill_domain_code in zip(skill_domain_names, skill_domain_codes):
        res = requests.post(API_URL + '/skill-domains', json={
            'name': skill_domain_name,
            'code': skill_domain_code,
        })
        res.raise_for_status()
        j = res.json()
        skill_domain = j['skill_domain']
        assert skill_domain['name'] == skill_domain_name
        assert skill_domain['code'] == skill_domain_code
        ids.append(j['skill_domain']['id'])

    # rename skill domain
    skill_domain_names[1] = 'Calculs'
    res = requests.put(API_URL + f'/skill-domains/{ids[1]}', json={'name': skill_domain_names[1]})
    res.raise_for_status()
    j = res.json()
    skill_domain = j['skill_domain']
    assert skill_domain['name'] == skill_domain_names[1]
    assert skill_domain['code'] == skill_domain_codes[1]

    # change skill domain's code
    skill_domain_codes[1] = 'D2'
    res = requests.put(API_URL + f'/skill-domains/{ids[1]}', json={'code': skill_domain_codes[1]})
    res.raise_for_status()
    j = res.json()
    skill_domain = j['skill_domain']
    assert skill_domain['name'] == skill_domain_names[1]
    assert skill_domain['code'] == skill_domain_codes[1]

    # delete skill domain
    res = requests.delete(API_URL + f'/skill-domains/{ids[-1]}')
    res.raise_for_status()
    res = requests.get(API_URL + '/skill-domains')
    res.raise_for_status()
    j = res.json()
    skill_domains = {skill_domain['id']: skill_domain for skill_domain in j['skill_domains']}
    assert ids[-1] not in skill_domains
    ids.pop()
    skill_domain_names.pop()
    skill_domain_codes.pop()

    # check final state
    skill_info = zip(skill_domain_names, skill_domain_codes)
    for i, (skill_domain_name, skill_domain_code) in reversed(list(enumerate(skill_info))):
        skill_domain = skill_domains[ids[i]]
        assert skill_domain['name'] == skill_domain_name
        assert skill_domain['code'] == skill_domain_code

    print('Tested /skill-domains')
    return ids


def add_levels() -> List[int]:
    print('Testing /levels')

    level_prefixes = [
        '3e',
        '4E',  # changed to '4e' later
        '5e',
        '6e',
        '7e',
    ]

    # add levels
    ids = []
    for level_prefix in level_prefixes:
        res = requests.post(API_URL + '/levels', json={'prefix': level_prefix})
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['level']['prefix'] == level_prefix
        ids.append(j['level']['id'])

    # rename level
    level_prefixes[1] = '4e'
    res = requests.put(API_URL + f'/levels/{ids[1]}', json={'prefix': level_prefixes[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['level']['prefix'] == level_prefixes[1]

    # delete level
    res = requests.delete(API_URL + f'/levels/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/levels/{ids[4]}')
    assert res.status_code == 404
    ids.pop()
    level_prefixes.pop()

    # check final state
    for i, level_prefix in reversed(list(enumerate(level_prefixes))):
        res = requests.get(API_URL + f'/levels/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['level']['prefix'] == level_prefix

    print('Tested /levels')
    return ids


def add_school_classes(level_ids: List[int]) -> List[int]:
    print('Testing /school-classes')
    assert len(level_ids) == 4
    l3, l4, l5, l6 = level_ids

    levels = [l3, l4, l6, l6, l6]
    school_class_suffixes = ['1', 'X', '3', '4', 'ZZZ']
    assert len(levels) == len(school_class_suffixes)

    # add school classes
    ids = []
    for level_id, school_class_suffix in zip(levels, school_class_suffixes):
        res = requests.post(API_URL + '/school-classes', json={
            'level_id': level_id,
            'suffix': school_class_suffix,
        })
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['level']['id'] == level_id
        assert j['school_class']['suffix'] == school_class_suffix
        ids.append(j['school_class']['id'])

    # rename school class
    school_class_suffixes[1] = '5'
    res = requests.put(API_URL + f'/school-classes/{ids[1]}', json={'suffix': school_class_suffixes[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['level']['id'] == levels[1]
    assert j['school_class']['suffix'] == school_class_suffixes[1]

    # delete school class
    res = requests.delete(API_URL + f'/school-classes/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/school-classes/{ids[4]}')
    assert res.status_code == 404
    ids.pop()
    levels.pop()
    school_class_suffixes.pop()

    # check final state
    for i, school_class_suffix in reversed(list(enumerate(school_class_suffixes))):
        res = requests.get(API_URL + f'/school-classes/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['suffix'] == school_class_suffix

    print('Tested /school-classes')
    return ids


def add_students(school_class_ids: List[int]) -> List[int]:
    print('Testing /students')
    a, b, c, d = school_class_ids
    student_classes = [a, a, a, a, a, a, b, b, b, c, c]
    display_names = [
        'Alice Wonderland',
        'Bob Dylan',
        'Charlie Brown',
        'Dave Ramsay',
        'Eve V',
        'Faith Connors',
        'Grace Hopper',
        'Henri Ford',
        'Judy Hopps',
        'Ken Thompson',
        'Tycho Brahe',
    ]
    assert len(student_classes) == len(display_names)

    # add students
    ids = []
    for school_class_id, display_name in zip(student_classes, display_names):
        first, last = display_name.lower().split()
        username = first[0] + last
        password = username + '42'
        res = requests.post(API_URL + '/students', json={
            'school_class_id': school_class_id,
            'display_name': display_name,
            'username': username,
            'password': password,
            'can_register_to_waitlist': False,
        })
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['id'] == school_class_id
        assert j['student']['display_name'] == display_name
        ids.append(j['student']['id'])

    # rename student
    display_names[1] = 'Bob Marley'
    res = requests.put(API_URL + f'/students/{ids[1]}', json={'display_name': display_names[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['school_class']['id'] == student_classes[1]
    assert j['student']['display_name'] == display_names[1]

    # get student
    res = requests.get(API_URL + f'/students/{ids[4]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['student']['id'] == ids[4]
    user_id = j['student']['user_id']

    # delete student
    res = requests.delete(API_URL + f'/students/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/students/{ids[4]}')
    assert res.status_code == 404
    res = requests.get(API_URL + f'/users/{user_id}')
    assert res.status_code == 404
    ids.pop(4)
    student_classes.pop(4)
    display_names.pop(4)

    # check final state
    for id, school_class_id, display_name in reversed(list(zip(ids, student_classes, display_names))):
        res = requests.get(API_URL + f'/students/{id}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['id'] == school_class_id
        assert j['student']['display_name'] == display_name

    print('Tested /students')
    return ids


def add_evaluations(student_ids: List[int]) -> List[int]:
    print('Testing /evaluations')

    # get belts
    res = requests.get(API_URL + '/belts')
    res.raise_for_status()
    j = res.json()
    belts = j['belts']
    belts.sort(key=lambda belt: belt['rank'])

    # get skill domains
    res = requests.get(API_URL + '/skill-domains')
    res.raise_for_status()
    j = res.json()
    skill_domains = j['skill_domains']

    school_year_start = date(2021, 9, 1)
    school_year_stop = date(2022, 7, 8)
    school_year_days = (school_year_stop - school_year_start).days

    # add belt evaluations
    evaluation_ids = []
    for student_id in student_ids:
        for skill_domain in skill_domains:
            evaluation_dates = sorted(
                (school_year_start + timedelta(days=randrange(school_year_days))).isoformat()
                for _ in range(randrange(3 * len(belts) // 2))
            )
            cur_belt = 0
            for evaluation_date in evaluation_dates:
                belt = belts[cur_belt]
                success = choice((False, True))

                res = requests.post(API_URL + '/evaluations', json={
                    'student_id': student_id,
                    'skill_domain_id': skill_domain['id'],
                    'belt_id': belt['id'],
                    'date': evaluation_date,
                    'success': success,
                })
                res.raise_for_status()
                j = res.json()
                print(j)
                assert j['skill_domain']['id'] == skill_domain['id']
                assert j['belt']['id'] == belt['id']
                assert j['student']['id'] == student_id
                assert j['evaluation']['date'] == evaluation_date
                assert j['evaluation']['success'] == success
                evaluation_ids.append(j['evaluation']['id'])

                if success:
                    cur_belt += 1
                    if cur_belt >= len(belts):
                        break

    student_id = choice(student_ids)
    skill_domain = choice(skill_domains)
    belt = choice(belts)
    evaluation_date = (school_year_start + timedelta(days=randrange(school_year_days))).isoformat()
    success = False

    # add one more belt evaluation
    res = requests.post(API_URL + '/evaluations', json={
        'student_id': student_id,
        'skill_domain_id': skill_domain['id'],
        'belt_id': belt['id'],
        'date': evaluation_date,
        'success': success,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['skill_domain']['id'] == skill_domain['id']
    assert j['belt']['id'] == belt['id']
    assert j['student']['id'] == student_id
    assert j['evaluation']['date'] == evaluation_date
    assert j['evaluation']['success'] == success
    evaluation_id = j['evaluation']['id']

    # update belt evaluation
    success = True
    res = requests.put(API_URL + f'/evaluations/{evaluation_id}', json={
        'success': success,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['skill_domain']['id'] == skill_domain['id']
    assert j['belt']['id'] == belt['id']
    assert j['student']['id'] == student_id
    assert j['evaluation']['date'] == evaluation_date
    assert j['evaluation']['success'] == success

    # delete belt evaluation
    res = requests.delete(API_URL + f'/evaluations/{evaluation_id}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/students/{student_id}')
    res.raise_for_status()
    j = res.json()
    evaluations = {evaluation['id']: evaluation for evaluation in j['evaluations']}
    assert evaluation_id not in evaluations

    print('Tested /evaluations')
    return evaluation_ids


def add_waitlist_entries(student_ids: List[int]) -> None:
    print('Testing waitlist endpoints')

    # get belts
    res = requests.get(API_URL + '/belts')
    res.raise_for_status()
    j = res.json()
    belts = j['belts']
    belts.sort(key=lambda belt: belt['rank'])
    belt_by_id = {belt['id']: belt for belt in belts}

    # get skill domains
    res = requests.get(API_URL + '/skill-domains')
    res.raise_for_status()
    j = res.json()
    skill_domains = j['skill_domains']

    for student_id in student_ids:
        # get this student's belts
        res = requests.get(API_URL + f'/students/{student_id}')
        res.raise_for_status()
        j = res.json()
        assert j['student']['id'] == student_id
        assert j['school_class']['id'] == j['student']['school_class_id']
        assert j['level']['id'] == j['school_class']['level_id']

        evaluations = j['evaluations']
        for skill_domain in skill_domains:
            if randrange(3) != 0:
                continue

            # find currently achieved belt for this skill domain
            achieved_belt_id = max(
                (
                    evaluation['belt_id']
                    for evaluation in evaluations
                    if evaluation['skill_domain_id'] == skill_domain['id']
                    if evaluation['success']
                ),
                default=None,
            )
            current_rank = 0 if achieved_belt_id is None else belt_by_id[achieved_belt_id]['rank']

            # register for evaluation of current belt (should fail)
            if current_rank > 0:
                res = requests.post(API_URL + f'/students/{student_id}/waitlist', json={
                    'belt_id': achieved_belt_id,
                    'skill_domain_id': skill_domain['id'],
                })
                assert res.status_code == 409

            # register for evaluation of next belt
            if current_rank < len(belts):
                res = requests.post(API_URL + f'/students/{student_id}/waitlist', json={
                    'belt_id': belts[current_rank]['id'],
                    'skill_domain_id': skill_domain['id'],
                })
                res.raise_for_status()

            # register for evaluation of the belt after (should fail)
            if current_rank + 1 < len(belts):
                res = requests.post(API_URL + f'/students/{student_id}/waitlist', json={
                    'belt_id': belts[current_rank + 1]['id'],
                    'skill_domain_id': skill_domain['id'],
                })
                assert res.status_code == 409

    print('Tested waitlist endpoints')


def main() -> None:
    seed(42)
    start_api()
    reset_database()
    add_admin()
    test_missing_i18n_keys()
    add_users()
    add_belts()
    add_skill_domains()
    level_ids = add_levels()
    school_class_ids = add_school_classes(level_ids)
    student_ids = add_students(school_class_ids)
    add_evaluations(student_ids)
    add_waitlist_entries(student_ids)


if __name__ == '__main__':
    main()
