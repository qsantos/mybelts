#!/usr/bin/env python3
from datetime import date, timedelta
from multiprocessing import Process
from random import choice, randrange, seed
from time import sleep
from typing import List

import requests  # type: ignore
from requests.exceptions import ConnectionError
from alembic import command
from alembic.config import Config

from skills.api import create_app
from skills.schema import Base, User, session_context

API_PORT = 5001
API_URL = f'http://127.0.0.1:{API_PORT}/api'

requests = requests.session()

def run_api() -> None:
    app = create_app()
    app.run(port=API_PORT)


def start_api() -> None:
    # start Flask in a separate process
    Process(target=run_api, daemon=True).start()
    # wait until the API is ready
    while True:
        try:
            res = requests.get(API_URL)
        except ConnectionError:
            pass
        else:
            if res.status_code == 200:
                break
        sleep(1)


def reset_database() -> None:
    print('Reseting database')
    Base.metadata.drop_all()
    command.stamp(Config('./alembic.ini'), 'base')
    command.upgrade(Config('./alembic.ini'), 'head')
    print('Reset Database')


def add_admin() -> None:
    print('Testing /login')

    # create admin user
    with session_context() as session:
        user = User(
            name='root',
            password='root',
            is_admin=True,
        )
        session.add(user)
        session.commit()

    # check authentication is required
    res = requests.get(API_URL + '/belts')
    assert res.status_code == 401

    # test logging in
    res = requests.post(API_URL + '/login', json={'name': 'root', 'password': 'root'})
    res.raise_for_status()
    j = res.json()
    print(j)
    requests.headers.update({'Authorization': 'Bearer ' + j['token']})

    # check authentication succeeds
    res = requests.get(API_URL + '/belts')
    j = res.json()
    print(j)
    res.raise_for_status()
    assert j == {'belts': []}

    print('Tested /login')


def add_users() -> None:
    print('Testing /users resource')

    # add first user
    res = requests.post(API_URL + '/users', json={
        'name': 'me',
        'password': 'me',
        'is_admin': True,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['user']['name'] == 'me'
    assert j['user']['is_admin']
    user_id1 = j['user']['id']

    # add second user
    res = requests.post(API_URL + '/users', json={
        'name': 'tartempion',
        'password': 'correct horse battery staple',
        'is_admin': True,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['user']['name'] == 'tartempion'
    assert j['user']['is_admin']
    user_id2 = j['user']['id']

    # update second user
    res = requests.put(API_URL + f'/users/{user_id2}', json={
        'is_admin': False,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['user']['id'] == user_id2
    assert j['user']['name'] == 'tartempion'
    assert not j['user']['is_admin']

    # delete second user
    res = requests.delete(API_URL + f'/users/{user_id2}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/users/{user_id2}')
    assert res.status_code == 404

    # check final state
    res = requests.get(API_URL + f'/users/{user_id1}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['user']['id'] == user_id1
    assert j['user']['name'] == 'me'
    assert j['user']['is_admin']

    print('Tested /users resource')


def add_belts() -> List[int]:
    print('Testing /belts resource')

    belt_names = [
        'White belt',
        'White belt',  # changed to 'Yellow belt' later
        'Orange belt',
        'Green belt',
        'Blue belt',
        'Brown belt',
        'Black belt',
        'Transparent belt',  # deleted later
    ]

    belt_colors = [
        '#ffffff',
        '#ffffff',  # changed to '#f6d32d' later
        '#ff7800',
        '#13dc00',
        '#3584e4',
        '#865e3c',
        '#000000',
        '#dc8add'  # deleted later
    ]

    assert len(belt_names) == len(belt_colors)

    # add belts
    ids = []
    for i, (belt_name, belt_color) in enumerate(zip(belt_names, belt_colors)):
        res = requests.post(API_URL + '/belts', json={'name': belt_name, 'color': belt_color})
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['belt']['name'] == belt_name
        assert j['belt']['rank'] == i + 1
        ids.append(j['belt']['id'])
    assert len(ids) == len(belt_names)

    # rename belt
    belt_names[1] = 'Yellow belt'
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'name': belt_names[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # change belt's color
    belt_colors[1] = '#f6d32d'
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'color': belt_colors[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # delete belt
    res = requests.delete(API_URL + f'/belts/{ids[-1]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/belts/{ids[-1]}')
    assert res.status_code == 404
    belt_names.pop()
    ids.pop()

    # exchange rank with another belt
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'other_belt_id': ids[2]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 3

    # check rank of other belt
    res = requests.get(API_URL + f'/belts/{ids[2]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[2]
    assert j['belt']['name'] == belt_names[2]
    assert j['belt']['rank'] == 2

    # increase rank by 2
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'increase_by': 2})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 5

    # check rank of the other two belts
    res = requests.get(API_URL + f'/belts/{ids[3]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[3]
    assert j['belt']['name'] == belt_names[3]
    assert j['belt']['rank'] == 3
    res = requests.get(API_URL + f'/belts/{ids[4]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[4]
    assert j['belt']['name'] == belt_names[4]
    assert j['belt']['rank'] == 4

    # move back to initial position
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'increase_by': -3})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # check final state
    for i, belt_name in reversed(list(enumerate(belt_names))):
        res = requests.get(API_URL + f'/belts/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['belt']['name'] == belt_name
        assert j['belt']['rank'] == i + 1

    print('Tested /belts resource')
    return ids


def add_skill_domains() -> List[int]:
    print('Testing resource /skill-domains')

    skill_domain_names = [
        'Algebra',
        'arithmetic',
        'Calculus',
        'Geometry',
        'Logic',
        'History',
    ]

    # add skill domains
    ids = []
    for skill_domain_name in skill_domain_names:
        res = requests.post(API_URL + '/skill-domains', json={'name': skill_domain_name})
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['skill_domain']['name'] == skill_domain_name
        ids.append(j['skill_domain']['id'])

    # rename skill domain
    skill_domain_names[1] = 'Arithmetic'
    res = requests.put(API_URL + f'/skill-domains/{ids[1]}', json={'name': skill_domain_names[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['skill_domain']['name'] == skill_domain_names[1]

    # delete skill domain
    skill_domain_names[1] = 'Arithmetic'
    res = requests.delete(API_URL + f'/skill-domains/{ids[-1]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/skill-domains/{ids[-1]}')
    assert res.status_code == 404
    ids.pop()
    skill_domain_names.pop()

    # check final state
    for i, skill_domain_name in reversed(list(enumerate(skill_domain_names))):
        res = requests.get(API_URL + f'/skill-domains/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['skill_domain']['name'] == skill_domain_name

    print('Tested resource /skill-domains')
    return ids


def add_class_levels() -> List[int]:
    print('Testing resource /class-levels')

    class_level_prefixes = [
        '3e',
        '4E',
        '5e',
        '6e',
        '7e',
    ]

    # add class levels
    ids = []
    for class_level_prefix in class_level_prefixes:
        res = requests.post(API_URL + '/class-levels', json={'prefix': class_level_prefix})
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['class_level']['prefix'] == class_level_prefix
        ids.append(j['class_level']['id'])

    # rename class level
    class_level_prefixes[1] = '4e'
    res = requests.put(API_URL + f'/class-levels/{ids[1]}', json={'prefix': class_level_prefixes[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['class_level']['prefix'] == class_level_prefixes[1]

    # delete class level
    res = requests.delete(API_URL + f'/class-levels/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/class-levels/{ids[4]}')
    assert res.status_code == 404
    ids.pop()
    class_level_prefixes.pop()

    # check final state
    for i, class_level_prefix in reversed(list(enumerate(class_level_prefixes))):
        res = requests.get(API_URL + f'/class-levels/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['class_level']['prefix'] == class_level_prefix

    print('Tested resource /class-levels')
    return ids


def add_school_classes(class_level_ids: List[int]) -> List[int]:
    print('Testing resource /school-classes')
    assert len(class_level_ids) == 4
    l3, l4, l5, l6 = class_level_ids

    school_class_levels = [l3, l4, l6, l6, l6]
    school_class_suffixes = ['1', 'X', '3', '4', 'ZZZ']
    assert len(school_class_levels) == len(school_class_suffixes)

    # add school classes
    ids = []
    for class_level_id, school_class_suffix in zip(school_class_levels, school_class_suffixes):
        res = requests.post(API_URL + '/school-classes', json={
            'class_level_id': class_level_id,
            'suffix': school_class_suffix,
        })
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['class_level']['id'] == class_level_id
        assert j['school_class']['suffix'] == school_class_suffix
        ids.append(j['school_class']['id'])

    # rename school class
    school_class_suffixes[1] = '5'
    res = requests.put(API_URL + f'/school-classes/{ids[1]}', json={'suffix': school_class_suffixes[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['class_level']['id'] == school_class_levels[1]
    assert j['school_class']['suffix'] == school_class_suffixes[1]

    # delete school class
    res = requests.delete(API_URL + f'/school-classes/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/school-classes/{ids[4]}')
    assert res.status_code == 404
    ids.pop()
    school_class_levels.pop()
    school_class_suffixes.pop()

    # check final state
    for i, school_class_suffix in reversed(list(enumerate(school_class_suffixes))):
        res = requests.get(API_URL + f'/school-classes/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['suffix'] == school_class_suffix

    print('Tested resource /school-classes')
    return ids


def add_students(school_class_ids: List[int]) -> List[int]:
    print('Testing resource /students')
    a, b, c, d = school_class_ids
    student_classes = [a, a, a, a, a, a, b, b, b, c, c]
    student_names = [
        'Alice Wonderland',
        'Bob Dylan',
        'Charlie Brown',
        'Dave Ramsay',
        'Eve V',
        'Faith Connors',
        'Grace Hopper',
        'Henri Ford',
        'Judy Hopps',
        'Ken Thompson',
        'Tycho Brahe',
    ]
    assert len(student_classes) == len(student_names)

    # add students
    ids = []
    for school_class_id, student_name in zip(student_classes, student_names):
        res = requests.post(API_URL + '/students', json={
            'school_class_id': school_class_id,
            'name': student_name,
        })
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['id'] == school_class_id
        assert j['student']['name'] == student_name
        ids.append(j['student']['id'])

    # rename student
    student_names[1] = 'Bob Marley'
    res = requests.put(API_URL + f'/students/{ids[1]}', json={'name': student_names[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['school_class']['id'] == student_classes[1]
    assert j['student']['name'] == student_names[1]

    # delete student
    res = requests.delete(API_URL + f'/students/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/students/{ids[4]}')
    assert res.status_code == 404
    ids.pop(4)
    student_classes.pop(4)
    student_names.pop(4)

    # check final state
    for id, school_class_id, student_name in reversed(list(zip(ids, student_classes, student_names))):
        res = requests.get(API_URL + f'/students/{id}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['id'] == school_class_id
        assert j['student']['name'] == student_name

    print('Tested resource /students')
    return ids


def add_belt_attempts(skill_domain_ids: List[int], belt_ids: List[int], student_ids: List[int]) -> List[int]:
    print('Testing resource /belt-attempts')
    da, db, dc, dd, de = skill_domain_ids

    school_year_start = date(2022, 9, 1)
    school_year_stop = date(2023, 7, 8)
    school_year_days = (school_year_stop - school_year_start).days

    # add belt attempts
    attempt_ids = []
    for student_id in student_ids:
        for skill_domain_id in skill_domain_ids:
            attempt_dates = sorted(
                (school_year_start + timedelta(days=randrange(school_year_days))).isoformat()
                for _ in range(randrange(3 * len(belt_ids) // 2))
            )
            cur_belt = 0
            for attempt_date in attempt_dates:
                belt_id = belt_ids[cur_belt]
                success = choice((False, True))

                res = requests.post(API_URL + '/belt-attempts', json={
                    'student_id': student_id,
                    'skill_domain_id': skill_domain_id,
                    'belt_id': belt_id,
                    'date': attempt_date,
                    'success': success,
                })
                res.raise_for_status()
                j = res.json()
                print(j)
                assert j['skill_domain']['id'] == skill_domain_id
                assert j['belt']['id'] == belt_id
                assert j['student']['id'] == student_id
                assert j['belt_attempt']['date'] == attempt_date
                assert j['belt_attempt']['success'] == success
                attempt_ids.append(j['belt_attempt']['id'])

                if success:
                    cur_belt += 1
                    if cur_belt >= len(belt_ids):
                        break

    student_id = choice(student_ids)
    skill_domain_id = choice(skill_domain_ids)
    belt_id = choice(belt_ids)
    attempt_date = (school_year_start + timedelta(days=randrange(school_year_days))).isoformat()
    success = False

    # add one more belt attempt
    res = requests.post(API_URL + '/belt-attempts', json={
        'student_id': student_id,
        'skill_domain_id': skill_domain_id,
        'belt_id': belt_id,
        'date': attempt_date,
        'success': success,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['skill_domain']['id'] == skill_domain_id
    assert j['belt']['id'] == belt_id
    assert j['student']['id'] == student_id
    assert j['belt_attempt']['date'] == attempt_date
    assert j['belt_attempt']['success'] == success
    attempt_id = j['belt_attempt']['id']

    # update belt attempt
    success = True
    res = requests.put(API_URL + f'/belt-attempts/{attempt_id}', json={
        'skill_domain_id': skill_domain_id,
        'belt_id': belt_id,
        'date': attempt_date,
        'success': success,
    })
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['skill_domain']['id'] == skill_domain_id
    assert j['belt']['id'] == belt_id
    assert j['student']['id'] == student_id
    assert j['belt_attempt']['date'] == attempt_date
    assert j['belt_attempt']['success'] == success

    # delete belt attempt
    res = requests.delete(API_URL + f'/belt-attempts/{attempt_id}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/belt-attempts/{attempt_id}')
    assert res.status_code == 404

    print('Tested resource /belt-attempts')
    return attempt_ids


def main() -> None:
    seed(42)
    start_api()
    reset_database()
    add_admin()
    add_users()
    belt_ids = add_belts()
    skill_domain_ids = add_skill_domains()
    class_level_ids = add_class_levels()
    school_class_ids = add_school_classes(class_level_ids)
    student_ids = add_students(school_class_ids)
    add_belt_attempts(skill_domain_ids, belt_ids, student_ids)


if __name__ == '__main__':
    main()
