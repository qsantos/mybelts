#!/usr/bin/env python3
import requests  # type: ignore
from alembic import command
from alembic.config import Config

from skills.schema import Base

API_URL = 'http://127.0.0.1/api'

skill_domains = [
    {'name': 'Algebra'},
    {'name': 'Arithmetic'},
    {'name': 'Calculus'},
    {'name': 'Geometry'},
    {'name': 'Logic'},
]


def reset() -> None:
    print('Reseting database')
    Base.metadata.drop_all()
    command.stamp(Config('./alembic.ini'), 'base')
    command.upgrade(Config('./alembic.ini'), 'head')
    res = requests.get(API_URL + '/belts')
    res.raise_for_status()
    assert res.json() == {'belts': []}
    print('Reset Database')


def add_belts() -> None:
    print('Testing /belts resource')

    belt_names = [
        'White belt',
        'White belt',
        'Orange belt',
        'Green belt',
        'Blue belt',
        'Brown belt',
        'Black belt',
    ]

    # add belts
    ids = []
    for i, belt_name in enumerate(belt_names):
        res = requests.post(API_URL + '/belts', json={'name': belt_name})
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['belt']['name'] == belt_name
        assert j['belt']['rank'] == i + 1
        ids.append(j['belt']['id'])
    assert len(ids) == len(belt_names)

    # rename belt
    belt_names[1] = 'Yellow belt'
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'name': belt_names[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # change belt's color
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'color': 'yellow'})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # exchange rank with another belt
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'other_belt_id': ids[2]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 3

    # check rank of other belt
    res = requests.get(API_URL + f'/belts/{ids[2]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[2]
    assert j['belt']['name'] == belt_names[2]
    assert j['belt']['rank'] == 2

    # increase rank by 2
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'increase_by': 2})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 5

    # check rank of the other two belts
    res = requests.get(API_URL + f'/belts/{ids[3]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[3]
    assert j['belt']['name'] == belt_names[3]
    assert j['belt']['rank'] == 3
    res = requests.get(API_URL + f'/belts/{ids[4]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[4]
    assert j['belt']['name'] == belt_names[4]
    assert j['belt']['rank'] == 4

    # move back to initial position
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'increase_by': -3})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # check final state
    for i, belt_name in reversed(list(enumerate(belt_names))):
        res = requests.get(API_URL + f'/belts/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['belt']['name'] == belt_name
        assert j['belt']['rank'] == i + 1

    print('Tested /belts resource')


def main() -> None:
    reset()
    add_belts()


if __name__ == '__main__':
    main()
