#!/usr/bin/env python3
from typing import List

import requests  # type: ignore
from alembic import command
from alembic.config import Config

from skills.schema import Base

API_URL = 'http://127.0.0.1/api'


def reset() -> None:
    print('Reseting database')
    Base.metadata.drop_all()
    command.stamp(Config('./alembic.ini'), 'base')
    command.upgrade(Config('./alembic.ini'), 'head')
    res = requests.get(API_URL + '/belts')
    res.raise_for_status()
    assert res.json() == {'belts': []}
    print('Reset Database')


def add_belts() -> None:
    print('Testing /belts resource')

    belt_names = [
        'White belt',
        'White belt',
        'Orange belt',
        'Green belt',
        'Blue belt',
        'Brown belt',
        'Black belt',
        'Transparent belt',
    ]

    # add belts
    ids = []
    for i, belt_name in enumerate(belt_names):
        res = requests.post(API_URL + '/belts', json={'name': belt_name})
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['belt']['name'] == belt_name
        assert j['belt']['rank'] == i + 1
        ids.append(j['belt']['id'])
    assert len(ids) == len(belt_names)

    # rename belt
    belt_names[1] = 'Yellow belt'
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'name': belt_names[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # change belt's color
    res = requests.put(API_URL + f'/belts/{ids[1]}', json={'color': 'yellow'})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # delete belt
    res = requests.delete(API_URL + f'/belts/{ids[-1]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/belts/{ids[-1]}')
    assert res.status_code == 404
    belt_names.pop()
    ids.pop()

    # exchange rank with another belt
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'other_belt_id': ids[2]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 3

    # check rank of other belt
    res = requests.get(API_URL + f'/belts/{ids[2]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[2]
    assert j['belt']['name'] == belt_names[2]
    assert j['belt']['rank'] == 2

    # increase rank by 2
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'increase_by': 2})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 5

    # check rank of the other two belts
    res = requests.get(API_URL + f'/belts/{ids[3]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[3]
    assert j['belt']['name'] == belt_names[3]
    assert j['belt']['rank'] == 3
    res = requests.get(API_URL + f'/belts/{ids[4]}')
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[4]
    assert j['belt']['name'] == belt_names[4]
    assert j['belt']['rank'] == 4

    # move back to initial position
    res = requests.patch(API_URL + f'/belts/{ids[1]}/rank', json={'increase_by': -3})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['belt']['id'] == ids[1]
    assert j['belt']['name'] == belt_names[1]
    assert j['belt']['rank'] == 2

    # check final state
    for i, belt_name in reversed(list(enumerate(belt_names))):
        res = requests.get(API_URL + f'/belts/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['belt']['name'] == belt_name
        assert j['belt']['rank'] == i + 1

    print('Tested /belts resource')


def add_skill_domains() -> None:
    print('Testing resource /skill-domains')

    skill_domain_names = [
        'Algebra',
        'arithmetic',
        'Calculus',
        'Geometry',
        'Logic',
        'History',
    ]

    # add skill domains
    ids = []
    for skill_domain_name in skill_domain_names:
        res = requests.post(API_URL + '/skill-domains', json={'name': skill_domain_name})
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['skill_domain']['name'] == skill_domain_name
        ids.append(j['skill_domain']['id'])

    # rename skill domain
    skill_domain_names[1] = 'Arithmetic'
    res = requests.put(API_URL + f'/skill-domains/{ids[1]}', json={'name': skill_domain_names[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['skill_domain']['name'] == skill_domain_names[1]

    # delete skill domain
    skill_domain_names[1] = 'Arithmetic'
    res = requests.delete(API_URL + f'/skill-domains/{ids[-1]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/skill-domains/{ids[-1]}')
    assert res.status_code == 404
    ids.pop()
    skill_domain_names.pop()

    # check final state
    for i, skill_domain_name in reversed(list(enumerate(skill_domain_names))):
        res = requests.get(API_URL + f'/skill-domains/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['skill_domain']['name'] == skill_domain_name

    print('Tested resource /skill-domains')


def add_class_levels() -> List[int]:
    print('Testing resource /class-levels')

    class_level_prefixes = [
        '3e',
        '4E',
        '5e',
        '6e',
        '7e',
    ]

    # add class levels
    ids = []
    for class_level_prefix in class_level_prefixes:
        res = requests.post(API_URL + '/class-levels', json={'prefix': class_level_prefix})
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['class_level']['prefix'] == class_level_prefix
        ids.append(j['class_level']['id'])

    # rename class level
    class_level_prefixes[1] = '4e'
    res = requests.put(API_URL + f'/class-levels/{ids[1]}', json={'prefix': class_level_prefixes[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['class_level']['prefix'] == class_level_prefixes[1]

    # delete class level
    res = requests.delete(API_URL + f'/class-levels/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/class-levels/{ids[4]}')
    assert res.status_code == 404
    ids.pop()
    class_level_prefixes.pop()

    # check final state
    for i, class_level_prefix in reversed(list(enumerate(class_level_prefixes))):
        res = requests.get(API_URL + f'/class-levels/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['class_level']['prefix'] == class_level_prefix

    print('Tested resource /class-levels')
    return ids


def add_school_classes(class_level_ids: List[int]) -> List[int]:
    print('Testing resource /school-classes')
    assert len(class_level_ids) == 4
    l3, l4, l5, l6 = class_level_ids

    school_class_levels = [l3, l4, l6, l6, l6]
    school_class_suffixes = ['1', 'X', '3', '4', 'ZZZ']

    # add school classes
    ids = []
    for class_level_id, school_class_suffix in zip(school_class_levels, school_class_suffixes):
        res = requests.post(
            API_URL + f'/class-levels/{class_level_id}/school-classes',
            json={'suffix': school_class_suffix},
        )
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['class_level']['id'] == class_level_id
        assert j['school_class']['suffix'] == school_class_suffix
        ids.append(j['school_class']['id'])

    # rename school class
    school_class_suffixes[1] = '5'
    res = requests.put(API_URL + f'/school-classes/{ids[1]}', json={'suffix': school_class_suffixes[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['class_level']['id'] == school_class_levels[1]
    assert j['school_class']['suffix'] == school_class_suffixes[1]

    # delete school class
    res = requests.delete(API_URL + f'/school-classes/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/school-classes/{ids[4]}')
    assert res.status_code == 404
    ids.pop()
    school_class_levels.pop()
    school_class_suffixes.pop()

    # check final state
    for i, school_class_suffix in reversed(list(enumerate(school_class_suffixes))):
        res = requests.get(API_URL + f'/school-classes/{ids[i]}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['suffix'] == school_class_suffix

    print('Tested resource /school-classes')
    return ids


def add_students(school_class_ids: List[int]) -> None:
    print('Testing resource /students')
    a, b, c, d = school_class_ids
    student_classes = [a, a, a, a, b, b, b, c, c]
    student_names = [
        'Alice Wonderland',
        'Bob Dylan',
        'Charlie Brown',
        'Dave Ramsay',
        'Eve V',
        'Faythe Runner',
        'Grace Hopper',
        'Henri Ford',
        'Judy Hopps',
    ]

    # add students
    ids = []
    for school_class_id, student_name in zip(student_classes, student_names):
        res = requests.post(API_URL + f'/school-classes/{school_class_id}/students', json={
            'name': student_name,
        })
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['id'] == school_class_id
        assert j['student']['name'] == student_name
        ids.append(j['student']['id'])

    # rename student
    student_names[1] = 'Bob Marley'
    res = requests.put(API_URL + f'/students/{ids[1]}', json={'name': student_names[1]})
    res.raise_for_status()
    j = res.json()
    print(j)
    assert j['school_class']['id'] == student_classes[1]
    assert j['student']['name'] == student_names[1]

    # delete student
    res = requests.delete(API_URL + f'/students/{ids[4]}')
    res.raise_for_status()
    res = requests.get(API_URL + f'/students/{ids[4]}')
    assert res.status_code == 404
    ids.pop(4)
    student_classes.pop(4)
    student_names.pop(4)

    # check final state
    for id, school_class_id, student_name in reversed(list(zip(ids, student_classes, student_names))):
        res = requests.get(API_URL + f'/students/{id}')
        res.raise_for_status()
        j = res.json()
        print(j)
        assert j['school_class']['id'] == school_class_id
        assert j['student']['name'] == student_name

    print('Tested resource /students')


def main() -> None:
    reset()
    add_belts()
    add_skill_domains()
    class_level_ids = add_class_levels()
    school_class_ids = add_school_classes(class_level_ids)
    add_students(school_class_ids)


if __name__ == '__main__':
    main()
